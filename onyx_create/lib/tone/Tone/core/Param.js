define(["Tone/core/Tone","Tone/core/Type"],function(Tone){"use strict";Tone.Param=function(){var options=this.optionsObject(arguments,["param","units","convert"],Tone.Param.defaults);this._param=this.input=options.param;this.units=options.units;this.convert=options.convert;this.overridden=!1;if(!this.isUndef(options.value)){this.value=options.value}};Tone.extend(Tone.Param);Tone.Param.defaults={"units":Tone.Type.Default,"convert":!0,"param":undefined};Object.defineProperty(Tone.Param.prototype,"value",{get:function(){return this._toUnits(this._param.value)},set:function(value){var convertedVal=this._fromUnits(value);this._param.value=convertedVal}});Tone.Param.prototype._fromUnits=function(val){if(this.convert||this.isUndef(this.convert)){switch(this.units){case Tone.Type.Time:return this.toSeconds(val);case Tone.Type.Frequency:return this.toFrequency(val);case Tone.Type.Decibels:return this.dbToGain(val);case Tone.Type.NormalRange:return Math.min(Math.max(val,0),1);case Tone.Type.AudioRange:return Math.min(Math.max(val,-1),1);case Tone.Type.Positive:return Math.max(val,0);default:return val}}else{return val}};Tone.Param.prototype._toUnits=function(val){if(this.convert||this.isUndef(this.convert)){switch(this.units){case Tone.Type.Decibels:return this.gainToDb(val);default:return val}}else{return val}};Tone.Param.prototype._minOutput=0.00001;Tone.Param.prototype.setValueAtTime=function(value,time){value=this._fromUnits(value);this._param.setValueAtTime(value,this.toSeconds(time));return this};Tone.Param.prototype.setRampPoint=function(now){now=this.defaultArg(now,this.now());var currentVal=this._param.value;this._param.setValueAtTime(currentVal,now);return this};Tone.Param.prototype.linearRampToValueAtTime=function(value,endTime){value=this._fromUnits(value);this._param.linearRampToValueAtTime(value,this.toSeconds(endTime));return this};Tone.Param.prototype.exponentialRampToValueAtTime=function(value,endTime){value=this._fromUnits(value);value=Math.max(this._minOutput,value);this._param.exponentialRampToValueAtTime(value,this.toSeconds(endTime));return this};Tone.Param.prototype.exponentialRampToValue=function(value,rampTime){var now=this.now();var currentVal=this.value;this.setValueAtTime(Math.max(currentVal,this._minOutput),now);this.exponentialRampToValueAtTime(value,now+this.toSeconds(rampTime));return this};Tone.Param.prototype.linearRampToValue=function(value,rampTime){var now=this.now();this.setRampPoint(now);this.linearRampToValueAtTime(value,now+this.toSeconds(rampTime));return this};Tone.Param.prototype.setTargetAtTime=function(value,startTime,timeConstant){value=this._fromUnits(value);value=Math.max(this._minOutput,value);timeConstant=Math.max(this._minOutput,timeConstant);this._param.setTargetAtTime(value,this.toSeconds(startTime),timeConstant);return this};Tone.Param.prototype.setValueCurveAtTime=function(values,startTime,duration){for(var i=0;i<values.length;i++){values[i]=this._fromUnits(values[i])}
this._param.setValueCurveAtTime(values,this.toSeconds(startTime),this.toSeconds(duration));return this};Tone.Param.prototype.cancelScheduledValues=function(startTime){this._param.cancelScheduledValues(this.toSeconds(startTime));return this};Tone.Param.prototype.rampTo=function(value,rampTime){rampTime=this.defaultArg(rampTime,0);if(this.units===Tone.Type.Frequency||this.units===Tone.Type.BPM){this.exponentialRampToValue(value,rampTime)}else{this.linearRampToValue(value,rampTime)}
return this};Tone.Param.prototype.dispose=function(){Tone.prototype.dispose.call(this);this._param=null;return this};return Tone.Param})