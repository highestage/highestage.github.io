define(["Tone/core/Tone","Tone/core/Transport"],function(Tone){"use strict";Tone.Note=function(channel,time,value){this.value=value;this._channel=channel;this._timelineID=Tone.Transport.setTimeline(this._trigger.bind(this),time)};Tone.Note.prototype._trigger=function(time){channelCallbacks(this._channel,time,this.value)};Tone.Note.prototype.dispose=function(){Tone.Transport.clearTimeline(this._timelineID);this.value=null;return this};var NoteChannels={};function channelCallbacks(channel,time,value){if(NoteChannels.hasOwnProperty(channel)){var callbacks=NoteChannels[channel];for(var i=0,len=callbacks.length;i<len;i++){var callback=callbacks[i];if(Array.isArray(value)){callback.apply(window,[time].concat(value))}else{callback(time,value)}}}}
Tone.Note.route=function(channel,callback){if(NoteChannels.hasOwnProperty(channel)){NoteChannels[channel].push(callback)}else{NoteChannels[channel]=[callback]}};Tone.Note.unroute=function(channel,callback){if(NoteChannels.hasOwnProperty(channel)){var channelCallback=NoteChannels[channel];var index=channelCallback.indexOf(callback);if(index!==-1){NoteChannels[channel].splice(index,1)}}};Tone.Note.parseScore=function(score){var notes=[];for(var inst in score){var part=score[inst];if(inst==="tempo"){Tone.Transport.bpm.value=part}else if(inst==="timeSignature"){Tone.Transport.timeSignature=part[0]/(part[1]/4)}else if(Array.isArray(part)){for(var i=0;i<part.length;i++){var noteDescription=part[i];var note;if(Array.isArray(noteDescription)){var time=noteDescription[0];var value=noteDescription.slice(1);note=new Tone.Note(inst,time,value)}else if(typeof noteDescription==="object"){note=new Tone.Note(inst,noteDescription.time,noteDescription)}else{note=new Tone.Note(inst,noteDescription)}
notes.push(note)}}else{throw new TypeError("score parts must be Arrays")}}
return notes};return Tone.Note})