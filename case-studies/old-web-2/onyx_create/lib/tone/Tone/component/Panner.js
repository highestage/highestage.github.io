define(["Tone/core/Tone","Tone/component/CrossFade","Tone/component/Merge","Tone/component/Split","Tone/signal/Signal","Tone/signal/GainToAudio"],function(Tone){"use strict";Tone.Panner=function(initialPan){Tone.call(this);this._hasStereoPanner=this.isFunction(this.context.createStereoPanner);if(this._hasStereoPanner){this._panner=this.input=this.output=this.context.createStereoPanner();this.pan=new Tone.Signal(0,Tone.Type.NormalRange);this._scalePan=new Tone.GainToAudio();this.pan.chain(this._scalePan,this._panner.pan)}else{this._crossFade=new Tone.CrossFade();this._merger=this.output=new Tone.Merge();this._splitter=this.input=new Tone.Split();this.pan=this._crossFade.fade;this._splitter.connect(this._crossFade,0,0);this._splitter.connect(this._crossFade,1,1);this._crossFade.a.connect(this._merger,0,0);this._crossFade.b.connect(this._merger,0,1)}
this.pan.value=this.defaultArg(initialPan,0.5);this._readOnly("pan")};Tone.extend(Tone.Panner);Tone.Panner.prototype.dispose=function(){Tone.prototype.dispose.call(this);this._writable("pan");if(this._hasStereoPanner){this._panner.disconnect();this._panner=null;this.pan.dispose();this.pan=null;this._scalePan.dispose();this._scalePan=null}else{this._crossFade.dispose();this._crossFade=null;this._splitter.dispose();this._splitter=null;this._merger.dispose();this._merger=null;this.pan=null}
return this};return Tone.Panner})