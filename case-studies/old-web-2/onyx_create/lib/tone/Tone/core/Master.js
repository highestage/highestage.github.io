define(["Tone/core/Tone","Tone/component/Volume"],function(Tone){"use strict";Tone.Master=function(){Tone.call(this);this._unmutedVolume=1;this._muted=!1;this._volume=this.output=new Tone.Volume();this.volume=this._volume.volume;this._readOnly("volume");this.input.chain(this.output,this.context.destination)};Tone.extend(Tone.Master);Tone.Master.defaults={"volume":0,"mute":!1};Object.defineProperty(Tone.Master.prototype,"mute",{get:function(){return this._muted},set:function(mute){if(!this._muted&&mute){this._unmutedVolume=this.volume.value;this.volume.value=-Infinity}else if(this._muted&&!mute){this.volume.value=this._unmutedVolume}
this._muted=mute}});Tone.Master.prototype.chain=function(){this.input.disconnect();this.input.chain.apply(this.input,arguments);arguments[arguments.length-1].connect(this.output)};Tone.Master.prototype.dispose=function(){Tone.prototype.dispose.call(this);this._writable("volume");this._volume.dispose();this._volume=null;this.volume=null};Tone.prototype.toMaster=function(){this.connect(Tone.Master);return this};AudioNode.prototype.toMaster=function(){this.connect(Tone.Master);return this};var MasterConstructor=Tone.Master;Tone._initAudioContext(function(){if(!Tone.prototype.isUndef(Tone.Master)){Tone.Master=new MasterConstructor()}else{MasterConstructor.prototype.dispose.call(Tone.Master);MasterConstructor.call(Tone.Master)}});return Tone.Master})