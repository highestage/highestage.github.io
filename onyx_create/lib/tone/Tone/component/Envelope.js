define(["Tone/core/Tone","Tone/signal/TimelineSignal","Tone/signal/Pow","Tone/core/Type"],function(Tone){"use strict";Tone.Envelope=function(){var options=this.optionsObject(arguments,["attack","decay","sustain","release"],Tone.Envelope.defaults);this.attack=options.attack;this.decay=options.decay;this.sustain=options.sustain;this.release=options.release;this._attackCurve=Tone.Envelope.Type.Linear;this._releaseCurve=Tone.Envelope.Type.Exponential;this._minOutput=0.00001;this._sig=this.output=new Tone.TimelineSignal();this._sig.setValueAtTime(this._minOutput,0);this.attackCurve=options.attackCurve;this.releaseCurve=options.releaseCurve};Tone.extend(Tone.Envelope);Tone.Envelope.defaults={"attack":0.01,"decay":0.1,"sustain":0.5,"release":1,"attackCurve":"linear","releaseCurve":"exponential",};Tone.Envelope.prototype._timeMult=0.25;Object.defineProperty(Tone.Envelope.prototype,"value",{get:function(){return this._sig.value}});Object.defineProperty(Tone.Envelope.prototype,"attackCurve",{get:function(){return this._attackCurve},set:function(type){if(type===Tone.Envelope.Type.Linear||type===Tone.Envelope.Type.Exponential){this._attackCurve=type}else{throw Error("attackCurve must be either \"linear\" or \"exponential\". Invalid type: ",type)}}});Object.defineProperty(Tone.Envelope.prototype,"releaseCurve",{get:function(){return this._releaseCurve},set:function(type){if(type===Tone.Envelope.Type.Linear||type===Tone.Envelope.Type.Exponential){this._releaseCurve=type}else{throw Error("releaseCurve must be either \"linear\" or \"exponential\". Invalid type: ",type)}}});Tone.Envelope.prototype.triggerAttack=function(time,velocity){var now=this.now()+this.blockTime;time=this.toSeconds(time,now);var attack=this.toSeconds(this.attack)+time;var decay=this.toSeconds(this.decay);velocity=this.defaultArg(velocity,1);if(this._attackCurve===Tone.Envelope.Type.Linear){this._sig.linearRampToValueBetween(velocity,time,attack)}else{this._sig.exponentialRampToValueBetween(velocity,time,attack)}
this._sig.setValueAtTime(velocity,attack);this._sig.exponentialRampToValueAtTime(this.sustain*velocity,attack+decay);return this};Tone.Envelope.prototype.triggerRelease=function(time){var now=this.now()+this.blockTime;time=this.toSeconds(time,now);var release=this.toSeconds(this.release);if(this._releaseCurve===Tone.Envelope.Type.Linear){this._sig.linearRampToValueBetween(this._minOutput,time,time+release)}else{this._sig.exponentialRampToValueBetween(this._minOutput,time,release+time)}
return this};Tone.Envelope.prototype.triggerAttackRelease=function(duration,time,velocity){time=this.toSeconds(time);this.triggerAttack(time,velocity);this.triggerRelease(time+this.toSeconds(duration));return this};Tone.Envelope.prototype.connect=Tone.Signal.prototype.connect;Tone.Envelope.prototype.dispose=function(){Tone.prototype.dispose.call(this);this._sig.dispose();this._sig=null;return this};Tone.Envelope.Phase={Attack:"attack",Decay:"decay",Sustain:"sustain",Release:"release",Standby:"standby",};Tone.Envelope.Type={Linear:"linear",Exponential:"exponential",};return Tone.Envelope})