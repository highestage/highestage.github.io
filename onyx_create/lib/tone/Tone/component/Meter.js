define(["Tone/core/Tone"],function(Tone){"use strict";Tone.Meter=function(){var options=this.optionsObject(arguments,["channels","smoothing"],Tone.Meter.defaults);Tone.call(this);this._channels=options.channels;this.smoothing=options.smoothing;this.clipMemory=options.clipMemory;this.clipLevel=options.clipLevel;this._volume=new Array(this._channels);this._values=new Array(this._channels);for(var i=0;i<this._channels;i++){this._volume[i]=0;this._values[i]=0}
this._lastClip=new Array(this._channels);for(var j=0;j<this._lastClip.length;j++){this._lastClip[j]=0}
this._jsNode=this.context.createScriptProcessor(options.bufferSize,this._channels,1);this._jsNode.onaudioprocess=this._onprocess.bind(this);this._jsNode.noGC();this.input.connect(this.output);this.input.connect(this._jsNode)};Tone.extend(Tone.Meter);Tone.Meter.defaults={"smoothing":0.8,"bufferSize":1024,"clipMemory":0.5,"clipLevel":0.9,"channels":1};Tone.Meter.prototype._onprocess=function(event){var bufferSize=this._jsNode.bufferSize;var smoothing=this.smoothing;for(var channel=0;channel<this._channels;channel++){var input=event.inputBuffer.getChannelData(channel);var sum=0;var total=0;var x;for(var i=0;i<bufferSize;i++){x=input[i];total+=x;sum+=x*x}
var average=total/bufferSize;var rms=Math.sqrt(sum/bufferSize);if(rms>0.9){this._lastClip[channel]=Date.now()}
this._volume[channel]=Math.max(rms,this._volume[channel]*smoothing);this._values[channel]=average}};Tone.Meter.prototype.getLevel=function(channel){channel=this.defaultArg(channel,0);var vol=this._volume[channel];if(vol<0.00001){return 0}else{return vol}};Tone.Meter.prototype.getValue=function(channel){channel=this.defaultArg(channel,0);return this._values[channel]};Tone.Meter.prototype.getDb=function(channel){return this.gainToDb(this.getLevel(channel))};Tone.Meter.prototype.isClipped=function(channel){channel=this.defaultArg(channel,0);return Date.now()-this._lastClip[channel]<this._clipMemory*1000};Tone.Meter.prototype.dispose=function(){Tone.prototype.dispose.call(this);this._jsNode.disconnect();this._jsNode.onaudioprocess=null;this._jsNode=null;this._volume=null;this._values=null;this._lastClip=null;return this};return Tone.Meter})