define(["Tone/core/Tone","Tone/signal/ScaleExp","Tone/signal/Signal","Tone/core/Param"],function(Tone){"use strict";Tone.FeedbackCombFilter=function(){Tone.call(this);var options=this.optionsObject(arguments,["delayTime","resonance"],Tone.FeedbackCombFilter.defaults);this._delay=this.input=this.output=this.context.createDelay(1);this.delayTime=new Tone.Param({"param":this._delay.delayTime,"value":options.delayTime,"units":Tone.Type.Time});this._feedback=this.context.createGain();this.resonance=new Tone.Param({"param":this._feedback.gain,"value":options.resonance,"units":Tone.Type.NormalRange});this._delay.chain(this._feedback,this._delay);this._readOnly(["resonance","delayTime"])};Tone.extend(Tone.FeedbackCombFilter);Tone.FeedbackCombFilter.defaults={"delayTime":0.1,"resonance":0.5};Tone.FeedbackCombFilter.prototype.dispose=function(){Tone.prototype.dispose.call(this);this._writable(["resonance","delayTime"]);this._delay.disconnect();this._delay=null;this.delayTime.dispose();this.delayTime=null;this.resonance.dispose();this.resonance=null;this._feedback.disconnect();this._feedback=null;return this};return Tone.FeedbackCombFilter})