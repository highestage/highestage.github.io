define(["Tone/core/Tone","Tone/signal/Signal","Tone/signal/Expr","Tone/signal/EqualPowerGain"],function(Tone){"use strict";Tone.CrossFade=function(initialFade){Tone.call(this,2,1);this.a=this.input[0]=this.context.createGain();this.b=this.input[1]=this.context.createGain();this.fade=new Tone.Signal(this.defaultArg(initialFade,0.5),Tone.Type.NormalRange);this._equalPowerA=new Tone.EqualPowerGain();this._equalPowerB=new Tone.EqualPowerGain();this._invert=new Tone.Expr("1 - $0");this.a.connect(this.output);this.b.connect(this.output);this.fade.chain(this._equalPowerB,this.b.gain);this.fade.chain(this._invert,this._equalPowerA,this.a.gain);this._readOnly("fade")};Tone.extend(Tone.CrossFade);Tone.CrossFade.prototype.dispose=function(){Tone.prototype.dispose.call(this);this._writable("fade");this._equalPowerA.dispose();this._equalPowerA=null;this._equalPowerB.dispose();this._equalPowerB=null;this.fade.dispose();this.fade=null;this._invert.dispose();this._invert=null;this.a.disconnect();this.a=null;this.b.disconnect();this.b=null;return this};return Tone.CrossFade})