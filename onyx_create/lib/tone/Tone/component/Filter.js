define(["Tone/core/Tone","Tone/signal/Signal"],function(Tone){"use strict";Tone.Filter=function(){Tone.call(this);var options=this.optionsObject(arguments,["frequency","type","rolloff"],Tone.Filter.defaults);this._filters=[];this.frequency=new Tone.Signal(options.frequency,Tone.Type.Frequency);this.detune=new Tone.Signal(0,Tone.Type.Cents);this.gain=new Tone.Signal({"value":options.gain,"convert":!1});this.Q=new Tone.Signal(options.Q);this._type=options.type;this._rolloff=options.rolloff;this.rolloff=options.rolloff;this._readOnly(["detune","frequency","gain","Q"])};Tone.extend(Tone.Filter);Tone.Filter.defaults={"type":"lowpass","frequency":350,"rolloff":-12,"Q":1,"gain":0,};Object.defineProperty(Tone.Filter.prototype,"type",{get:function(){return this._type},set:function(type){var types=["lowpass","highpass","bandpass","lowshelf","highshelf","notch","allpass","peaking"];if(types.indexOf(type)===-1){throw new Error("Tone.Filter does not have filter type "+type)}
this._type=type;for(var i=0;i<this._filters.length;i++){this._filters[i].type=type}}});Object.defineProperty(Tone.Filter.prototype,"rolloff",{get:function(){return this._rolloff},set:function(rolloff){rolloff=parseInt(rolloff,10);var possibilities=[-12,-24,-48,-96];var cascadingCount=possibilities.indexOf(rolloff);if(cascadingCount===-1){throw new Error("Filter rolloff can only be -12, -24, -48 or -96")}
cascadingCount+=1;this._rolloff=rolloff;this.input.disconnect();for(var i=0;i<this._filters.length;i++){this._filters[i].disconnect();this._filters[i]=null}
this._filters=new Array(cascadingCount);for(var count=0;count<cascadingCount;count++){var filter=this.context.createBiquadFilter();filter.type=this._type;this.frequency.connect(filter.frequency);this.detune.connect(filter.detune);this.Q.connect(filter.Q);this.gain.connect(filter.gain);this._filters[count]=filter}
var connectionChain=[this.input].concat(this._filters).concat([this.output]);this.connectSeries.apply(this,connectionChain)}});Tone.Filter.prototype.dispose=function(){Tone.prototype.dispose.call(this);for(var i=0;i<this._filters.length;i++){this._filters[i].disconnect();this._filters[i]=null}
this._filters=null;this._writable(["detune","frequency","gain","Q"]);this.frequency.dispose();this.Q.dispose();this.frequency=null;this.Q=null;this.detune.dispose();this.detune=null;this.gain.dispose();this.gain=null;return this};return Tone.Filter})