define(["Tone/core/Tone","Tone/signal/Signal","Tone/component/Filter","Tone/core/Param"],function(Tone){"use strict";Tone.LowpassCombFilter=function(){Tone.call(this);var options=this.optionsObject(arguments,["delayTime","resonance","dampening"],Tone.LowpassCombFilter.defaults);this._delay=this.input=this.context.createDelay(1);this.delayTime=new Tone.Signal(options.delayTime,Tone.Type.Time);this._lowpass=this.output=this.context.createBiquadFilter();this._lowpass.Q.value=0;this._lowpass.type="lowpass";this.dampening=new Tone.Param({"param":this._lowpass.frequency,"units":Tone.Type.Frequency,"value":options.dampening});this._feedback=this.context.createGain();this.resonance=new Tone.Param({"param":this._feedback.gain,"units":Tone.Type.NormalRange,"value":options.resonance});this._delay.chain(this._lowpass,this._feedback,this._delay);this.delayTime.connect(this._delay.delayTime);this._readOnly(["dampening","resonance","delayTime"])};Tone.extend(Tone.LowpassCombFilter);Tone.LowpassCombFilter.defaults={"delayTime":0.1,"resonance":0.5,"dampening":3000};Tone.LowpassCombFilter.prototype.dispose=function(){Tone.prototype.dispose.call(this);this._writable(["dampening","resonance","delayTime"]);this.dampening.dispose();this.dampening=null;this.resonance.dispose();this.resonance=null;this._delay.disconnect();this._delay=null;this._lowpass.disconnect();this._lowpass=null;this._feedback.disconnect();this._feedback=null;this.delayTime.dispose();this.delayTime=null;return this};return Tone.LowpassCombFilter})